#DropBox POC

import dropbox 
from dropbox import DropboxOAuth2FlowNoRedirect
from dropbox.exceptions import AuthError, ApiError 
from dropbox.sharing import MemberSelector
import webbrowser
import os 

# EncryptoSphere APP on DropBox (under shaqedmov@gmail.com account)
APP_KEY = ''
APP_SECRET = ''

# Function to authenticate the Dropbox account and get access token
def authenticate_dropbox():
    email = input("Enter your Dropbox email address: ")
    print(f"Authenticating {email}'s Dropbox account...")

    # Start the OAuth flow
    auth_flow = DropboxOAuth2FlowNoRedirect(APP_KEY, APP_SECRET)

    # Generate the authorization URL
    auth_url = auth_flow.start()

    # Automatically open the URL in the default browser
    print("Opening the authorization page in your browser...")
    webbrowser.open(auth_url)

    print("1. Go to the opened browser tab.")
    print("2. Log in using your Dropbox credentials.")
    print("3. Click 'Allow' to authorize the app.")
    print("4. Copy the authorization code from the URL.")

    # Get the authorization code from the user
    auth_code = input("Enter the authorization code here: ")

    # Verify if the token is valid for the given email
    auth_result = verify_dropbox_token_for_user(auth_flow, auth_code, email)
    if not auth_result:
        return False

    # Extract access token and user_id from the result object
    access_token = auth_result.access_token
    user_id = auth_result.user_id

    print(f"Authentication successful.")

    return access_token

# Function to verify if the token is valid for the given email
def verify_dropbox_token_for_user(auth_flow, auth_code, expected_email):
    try:
        auth_result = auth_flow.finish(auth_code)
        dbx = dropbox.Dropbox(auth_result.access_token)
        current_account = dbx.users_get_current_account()
        current_email = current_account.email

        if current_email == expected_email:
            print(f"Token is valid and belongs to {current_email}.")
            return auth_result  # Return the entire auth result
        else:
            print(f"Error: The provided access token belongs to {current_email}, not {expected_email}.")
            return None
    except AuthError as e:
        print(f"Error: The provided access token is invalid. {e}")
        return None

# Function to upload a file to Dropbox
def upload_file(access_token, file_path, dropbox_dest_path):
    dbx = dropbox.Dropbox(access_token)
    try:
        with open(file_path, "rb") as f:
            dbx.files_upload(f.read(), dropbox_dest_path, mute=True)
        print(f"File uploaded successfully to {dropbox_dest_path}.")
    except FileNotFoundError:
        print("The file was not found.")
    except Exception as e:
        print(f"Error: {e}")

# Function to list files in the root directory of Dropbox
def list_files(access_token):
    dbx = dropbox.Dropbox(access_token)
    try:
        result = dbx.files_list_folder('')
        files = result.entries
        if not files:
            print("No files found.")
        else:
            print("Files in your Dropbox account:")
            for file in files:
                if isinstance(file, dropbox.files.FileMetadata):
                    print(f"File: {file.name} (Size: {file.size} bytes)")
                else:
                    print(f"Folder: {file.name}")
    except dropbox.exceptions.ApiError as e:
        print(f"Error fetching files: {e}")

# Function to download a file from Dropbox to the local machine
def download_file(access_token, dropbox_file_path):
    dbx = dropbox.Dropbox(access_token)
    try:
        metadata, res = dbx.files_download(dropbox_file_path)
        file_name = os.path.basename(dropbox_file_path)
        local_dest_path = os.path.join(os.path.expanduser("~"), "Downloads", file_name)

        with open(local_dest_path, "wb") as f:
            f.write(res.content)

        print(f"File downloaded successfully to {local_dest_path}.")
    except dropbox.exceptions.ApiError as e:
        print(f"Error: {e}")
    except FileNotFoundError:
        print("The specified Dropbox file was not found.")
    except Exception as e:
        print(f"Error: {e}")

# Function to share a file with an email address (without sending an email)
def share_file_with_email(access_token, dropbox_file_path, recipient_email):
    dbx = dropbox.Dropbox(access_token)
    try:
        recipient = MemberSelector.email(recipient_email)
        dbx.sharing_add_file_member(dropbox_file_path, [recipient])
        print(f"File successfully shared with {recipient_email}.")
    except ApiError as e:
        print(f"Error: {e}")
    except Exception as e:
        print(f"Error: {e}")


def list_shared_files_and_collaborators(access_token):

    # Initialize Dropbox API client
    dbx = dropbox.Dropbox(access_token)

    try:
        # Get shared folders metadata
        shared_folders = dbx.sharing_list_folders()

        if not shared_folders.entries:
            print("No shared folders found.")
            return

        # Iterate through each shared folder
        for folder in shared_folders.entries:
            print(f"Shared Folder: {folder.name}")

            # List files in the shared folder using the shared folder path
            folder_files = dbx.files_list_folder(f"/{folder.name}")  # Adjust path for root folders

            for entry in folder_files.entries:
                if isinstance(entry, dropbox.files.FileMetadata):
                    print(f"  File: {entry.name}")
                    print(f"  Path: {entry.path_display}")

                    # Get file collaborators (who it's shared with)
                    file_members = dbx.sharing_list_file_members(entry.id)

                    if file_members.members:
                        for member in file_members.members:
                            print(f"    Shared with: {member.email}")
                    else:
                        print(f"    No specific collaborators.")

            print("-" * 40)

    except dropbox.exceptions.ApiError as e:
        print(f"Error occurred: {e}")

# Main function to interact with the user
def main():
    print("Dropbox POC")

    access_token = authenticate_dropbox()
    if not access_token:
        print("Authentication failed.")
        return

    while True:
        print("\nSelect an action:")
        print("1. List files in Dropbox")
        print("2. Upload a file to Dropbox")
        print("3. Download a file from Dropbox")
        print("4. Share a file from Dropbox with another user")
        print("5. List all shared files")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            list_files(access_token)
        elif choice == '2':
            file_path = input("Enter the file path to upload: ")
            dropbox_dest_path = input("Enter the destination path in Dropbox (e.g., /folder/filename): ")
            upload_file(access_token, file_path, dropbox_dest_path)
        elif choice == '3':
            dropbox_file_path = input("Enter the file path to download (e.g., /folder/filename): ")
            download_file(access_token, dropbox_file_path)
        elif choice == '4':
            dropbox_file_path = input("Enter the path in Dropbox to share (e.g., /folder/filename): ")
            recipient_email = input("Enter email to share: ")
            share_file_with_email(access_token, dropbox_file_path, recipient_email)
        elif choice == '5':
            list_shared_files_and_collaborators(access_token)
        elif choice == '6':
            print("Exiting...")
            break
        else:
            print("Invalid choice, please try again.")

if __name__ == "__main__":
    main()
